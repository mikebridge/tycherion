{"version":3,"sources":["main/navBar.tsx","main/movieSelector.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","className","movieList","require","cropImgUrl","origUrl","newUrl","replace","MoviePreview","movie","Media","left","object","src","img","alt","title","body","heading","director","country","year","Button","onClick","console","log","url","window","gtag","location","setTimeout","MovieSelector","useState","suggestedMovie","setSuggestedMovie","Jumbotron","selectedMovie","count","Math","floor","random","items","item_id","findRandomMovie","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaa4b606.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Navbar,\n    NavbarBrand,\n} from 'reactstrap';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const NavBar = () => {\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n                <Container>\n                    <NavbarBrand href=\"/\" className=\"mr-auto\">Tycherion</NavbarBrand>\n                </Container>\n            </Navbar>\n        </div>\n    );\n}\n","import {Button, Container, Jumbotron, Media} from \"reactstrap\";\nimport React, {useState} from \"react\";\n//import ReactGA from 'react-ga';\n\ninterface IMovie {\n    title: string,\n    url: string,\n    img: string,\n    country: string,\n    year: string,\n    director: string\n}\n\nconst movieList: IMovie[] = require('../data/films.json');\n\n// interface MetaData {\n//\n// }\n//\n// const metaData: MetaData = require('../data/filmsMetaData.json');\n\nconst cropImgUrl = (origUrl: string): string => {\n    // https://vhx.imgix.net/criterionchannelchartersu/assets/bff62486-e5e9-4e8d-ad75-436cb2cf12c9.jpg?auto=format%2Ccompress&fit=crop,left&h=140&q=100&w=100&crop=left\n    const newUrl = origUrl.replace(/w=[0-9]+/, 'w=100');\n    return `${newUrl}&crop=left`\n}\n\nconst findRandomMovie = (movieList: IMovie[]): IMovie => {\n\n    let selectedMovie: IMovie = movieList[0];\n    let count = 0;\n    for (let movie of movieList) {\n        count += 1;\n        if (Math.floor(Math.random() * count) + 1 === count) {\n            selectedMovie = movie;\n        }\n    }\n    // MB: this should be a hook\n    (window as any).gtag('event', 'view_item', {\n        items: [{\n            item_id: selectedMovie.title,\n        }],\n    });\n\n    return selectedMovie;\n}\n\ninterface IMoviePreviewProps {\n    movie: IMovie;\n}\n\nexport const MoviePreview = ({movie}: IMoviePreviewProps) => {\n    const goToMovie = () => {\n        // (window as any).gtag('event', 'select_content', {\n        //     content_type: 'movie',\n        //     item_id: movie.title\n        // });\n        console.log(\"navigating to \");\n        console.log(movie.url);\n        console.log((window as any).gtag);\n        (window as any).gtag('event', 'click', {\n            'event_category': 'outbound',\n            'event_label': movie.url,\n            'transport_type': 'beacon',\n            'event_callback': () => {\n                (window as any).location = movie.url;\n            }\n        });\n        // fallback if event_callback is not fired\n        setTimeout(\n            () => {(window as any).location.href=movie.url;},\n            3000);\n    };\n    return (\n        <Media className=\"bg-light border\">\n            <Media left href=\"#\">\n                <Media object src={cropImgUrl(movie.img)} alt={movie.title} />\n            </Media>\n            <Media body>\n                <Container className=\"mt-1\">\n                    <Media heading>\n                        {movie.title}\n                    </Media>\n                    <div>\n                        <p className=\"font-weight-bold\">{movie.director}</p>\n                        <p className=\"font-italic\">{movie.country} ({movie.year})</p>\n                    </div>\n                    <Button color=\"primary\" onClick={goToMovie}>View on Criterion</Button>\n                </Container>\n            </Media>\n        </Media>\n    )\n}\n\nexport const MovieSelector = () => {\n    const [suggestedMovie, setSuggestedMovie] = useState<IMovie | null>(null);\n\n    const selectMovie = () => {\n        setSuggestedMovie(findRandomMovie(movieList));\n    }\n    return (\n        <div>\n            <Container>\n                <Jumbotron>\n                    <h1 className=\"display-5\">Random Movie Selector</h1>\n                    <hr className=\"my-2\"/>\n                    {!suggestedMovie &&\n                        <>\n                            <p className=\"lead\">Let the Goddess of Fortune, Tyche,\n                                assign you a movie on Criterion Channel.</p>\n                            {/*<p className=\"font-italic\">O Goddess Tyche</p>*/}\n                            <p className=\"lead\">\n                                <Button color=\"primary\" onClick={selectMovie}>I accept my fate</Button>\n                            </p>\n                        </>\n                    }\n                    {suggestedMovie &&\n                        <p>\n                            <p className=\"lead\">The Goddess of Fortune, Tyche, Has Determined Your Future.</p>\n\n                            <MoviePreview movie={suggestedMovie} />\n                        </p>\n                    }\n\n\n                </Jumbotron>\n                <Container>\n                    <p className=\"font-italic\">We like Criterion---but this page isn't associated with them in any way.</p>\n                </Container>\n\n            </Container>\n        </div>);\n}","import React from 'react';\n// import logo from './logo.svg';\n// import './app.css';\nimport {NavBar} from \"./main/navBar\";\nimport {MovieSelector} from \"./main/movieSelector\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n    <>\n      <NavBar/>\n      <MovieSelector/>\n    </>\n);\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n//   );\n// }\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\n// import ReactGA from 'react-ga';\n// const trackingId = \"G-1W98XG2459\";\n// ReactGA.initialize(trackingId);\n// // ReactGA.set({\n// // })\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}