{"version":3,"sources":["main/navBar.tsx","main/selectors/decadeSelector.tsx","main/selectors/geoSelector.tsx","main/utils.ts","main/filmData.ts","main/selectors/countryMultiSelector.tsx","main/selectors/genreMultiSelector.tsx","main/moviePreview.tsx","main/alert.tsx","main/urlUtils.ts","main/suggest.tsx","main/footer.tsx","main/suggestedResult.tsx","selectApp.tsx","main/search.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","to","className","getDecades","currentYear","Date","getFullYear","currentDecade","Array","from","length","x","i","DecadeMultiSelector","label","selectedDecades","onChange","useState","decades","setDecades","isOpen","setIsOpen","onSelectionChanged","e","currentValue","currentTarget","value","checked","newDecades","filter","decade","onClick","preventDefault","map","toString","type","name","includes","GeoSelector","localStorage","getItem","geo","setGeo","useEffect","setItem","setGeoToLocalStorage","abbrev","src","process","toLowerCase","alt","geoValue","ONE_MINUTE","dateReviver","key","a","exec","UTC","timeAgoInWords","dateThen","dateNow","now","getTime","then","timeDiff","formatDistanceStrict","addSuffix","movieList","require","metaData","obj","JSON","parse","stringify","err","withDateStringsAsDates","summary","genreData","CountryMultiSelector","selectedCountries","countries","setCountries","newCountries","countryStrings","Object","keys","country","GenreMultiSelector","selectedGenres","genres","setGenres","newGenres","genre","g","slug","MoviePreview","imgUrl","movie","onReset","img","title","director","year","url","timeoutId","setTimeout","window","location","assign","gtag","clearTimeout","Alert","message","getQsFromHash","hash","indexOf","substr","setQueryParamInHash","values","path","getPathFromHash","qs","query","URLSearchParams","delete","forEach","append","qsStr","getQueryParamFromHash","getAll","getSearchStateQS","Suggest","suggestedMovie","setSuggestedMovie","hasSelected","setHasSelected","history","useHistory","replace","href","rel","target","selectedGeo","selectedMovie","count","decadesInt","d","parseInt","movieSlug","movieYear","some","Math","floor","random","findRandomMovie","document","body","scrollTop","documentElement","push","oldMovie","Footer","date","scrapeterion","version","SuggestedResult","find","m","SelectApp","fuseIndex","Fuse","parseIndex","filmIndex","fuse","films","Search","search","Switch2","Switch","Route2","Route","App","exact","props","match","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Router2","Router","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5763728.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './navBar.css';\n\nexport const NavBar = () => {\n    return (\n        <header>\n            <Link to=\"/\" className=\"home-link\">Tycherion</Link>\n            {/*<Link to=\"suggest\">Home</Link>*/}\n            {/*<Link to=\"search\">Link</Link>*/}\n        </header>\n    );\n}\n","import React, {MouseEvent, useState} from \"react\";\nimport \"./selectors.css\";\n\nconst getDecades = (): number[] => {\n    const startDecade = 1910;\n    const currentYear = new Date().getFullYear();\n    const currentDecade = currentYear - (currentYear % 10);\n    return Array.from({length: (currentDecade - startDecade) / 10 + 1}, (\n        x, i) => startDecade + i * 10);\n}\n\ninterface IDecadeMultiSelectorProps {\n    label: string,\n    selectedDecades: string[],\n    onChange: (decades: string[]) => void\n}\n\nexport const DecadeMultiSelector = ({label, selectedDecades, onChange}: IDecadeMultiSelectorProps) => {\n    const [decades, setDecades] = useState<string[]>(selectedDecades);\n    const [isOpen, setIsOpen] = useState(selectedDecades.length > 0);\n    const toggle = (e: MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newDecades = [...decades, currentValue]\n            setDecades(newDecades);\n            onChange(newDecades);\n        } else {\n            const newDecades = decades.filter((decade) => currentValue !== decade);\n            setDecades(newDecades);\n            onChange(newDecades);\n        }\n\n    }\n    return (\n        <div className=\"selector\" >\n            <button className=\"selector-button\" onClick={toggle}>{label}</button>\n            <div className={`selector-panel ${isOpen ? \"selector-open\" : \"selector-closed\"}`}>\n            {getDecades().map(decade => decade.toString()).map(decade =>\n                <div key={decade} className=\"selector-item\">\n                    <label>\n                        <input type=\"checkbox\" name={decade} checked={decades.includes(decade)}\n                               value={decade} onChange={onSelectionChanged}/>\n                        {decade}s\n                    </label>\n                </div>\n            )}\n            </div>\n        </div>\n    )\n}","import React, {MouseEvent, useEffect, useState} from \"react\";\nimport \"./selectors.css\";\n\ninterface IGeoSelectorProps {\n    selectedGeo: string,\n    onChange: (geo: string) => void\n}\n\nconst geoLookup = (abbrev: string) => {\n    return abbrev==='CA' ? 'Canada' : 'United States'\n}\n\nconst getGeoFromLocalStorage = (): string | null => localStorage.getItem('geo');\n\nconst setGeoToLocalStorage = (geo: string) => localStorage.setItem('geo', geo);\n\nexport const GeoSelector = ({onChange}: IGeoSelectorProps) => {\n    const [geo, setGeo] = useState<string>(getGeoFromLocalStorage() || 'US');\n\n    useEffect(() => {\n        setGeoToLocalStorage(geo);\n        onChange(geo);\n    },[geo, onChange])\n\n    const onSelectionChanged = (e: MouseEvent<HTMLElement>, geoValue: string) => {\n        e.preventDefault();\n        setGeo(geoValue);\n    }\n    return (\n        <div className=\"selector\">\n            <div className=\"selector-button geoselector-button\">I am in:\n                <img className=\"geoselector-flag\"\n                     src={`${process.env.PUBLIC_URL}/${geo.toLowerCase()}.svg`} alt={geoLookup(geo)}\n                     onClick={(e) => onSelectionChanged(e,geo === 'US' ? 'CA': 'US')}/>\n            </div>\n\n        </div>\n    )\n}\n","import formatDistanceStrict from \"date-fns/formatDistanceStrict\";\n\n// These constants are the number of milliseconds that the given time interval consists of.\nexport const ONE_MINUTE: number = 60 * 1000;\nexport const FIVE_MINUTES: number = 5 * ONE_MINUTE;\nexport const FIFTEEN_MINUTES: number = 15 * ONE_MINUTE;\nexport const ONE_HOUR: number = 60 * ONE_MINUTE;\nexport const ONE_DAY: number = 24 * ONE_HOUR;\n\n// SEE: https://docs.microsoft.com/en-us/scripting/javascript/reference/json-parse-function-javascript\nexport const dateReviver = (key: string, value: any) => {\n    if (typeof value === \"string\") {\n        const a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z?$/.exec(\n            value\n        );\n        if (a) {\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n        }\n    }\n    return value;\n};\n\nexport const withDateStringsAsDates = (obj: any): any => {\n    try {\n        return JSON.parse(JSON.stringify(obj), dateReviver);\n    } catch (err) {\n        return obj;\n    }\n};\n\nexport const timeAgoInWords = (dateThen: Date, dateNow: Date = new Date()): string => {\n    const now = dateNow.getTime();\n    const then = dateThen.getTime();\n    const timeDiff = now - then;\n    if (timeDiff < ONE_MINUTE) {\n        return \"just now\";\n    }\n    return formatDistanceStrict(dateThen, dateNow, {addSuffix: true});\n};\n\nexport const partition = <T>(array: T[], size: number): T[][] =>\n    array.length ? [array.splice(0, size)].concat(partition(array, size)) : [];\n\nexport const topFunction = () => {\n    document.body.scrollTop = 0; // For Safari\n    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n}\n\n","import {withDateStringsAsDates} from \"./utils\";\n\nexport interface IMovie {\n    title: string,\n    url: string,\n    img: string,\n    country: string,\n    year: string,\n    director: string,\n    slug: string,\n    genre: string[],\n    geo: string[]\n}\n\nexport interface IMovieMetaData {\n    date: Date,\n    scrapeterion: string\n}\n\nexport interface IDirectorSummary {\n    name: string,\n    count: number\n}\n\nexport interface IYearSummary {\n    [key: string]: number\n}\n\nexport interface ICountrySummary {\n    [key: string]: number\n}\n\nexport interface IGenre {\n    slug: string,\n    name: string\n}\n\n\nexport const movieList: IMovie[] = require('../data/films.json');\n\nexport const metaDataPreDate: any = require('../data/filmsMetaData.json');\n\nexport const metaData: IMovieMetaData = withDateStringsAsDates(metaDataPreDate);\n\nexport const summary: ISummary = require('../data/summary.json');\n\nexport const genreData: IGenre[] = require('../data/genres.json');\n\ninterface ISummary {\n    count: number,\n    countries: ICountrySummary,\n    directors: { [key: string]: IDirectorSummary },\n    years: IYearSummary\n}\n\n","import React, {MouseEvent, useState} from \"react\";\nimport {summary} from \"../filmData\";\n\n\nconst getCountries = (): string[] => Object.keys(summary.countries)\n\n\ninterface ICountryMultiSelectorProps {\n    label: string,\n    selectedCountries: string[],\n    onChange: (country: string[]) => void\n}\n\nexport const CountryMultiSelector = ({label, selectedCountries, onChange}: ICountryMultiSelectorProps) => {\n    const [countries, setCountries] = useState<string[]>(selectedCountries);\n    const [isOpen, setIsOpen] = useState(countries.length > 0);\n    const toggle = (e: MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newCountries = [...countries, currentValue]\n            setCountries(newCountries);\n            onChange(newCountries);\n        } else {\n            const newCountries = countries.filter((countries) => currentValue !== countries);\n            setCountries(newCountries);\n            onChange(newCountries);\n        }\n    }\n    const countryStrings = getCountries().map(country => country.toString());\n    return (\n        <div className=\"selector\">\n            <button className=\"selector-button\" onClick={toggle}>{label}</button>\n            <div className={`selector-panel ${isOpen ? \"selector-open\" : \"selector-closed\"}`}>\n            {countryStrings.map(country =>\n                <div key={country} className=\"selector-item\">\n                    <label>\n                        <input type=\"checkbox\" name={`c_{country}`} checked={countries.includes(country)}\n                               value={country} onChange={onSelectionChanged}/>\n                        {country}\n                    </label>\n                </div>\n            )}\n            </div>\n        </div>\n    )\n}","import React, {MouseEvent, useState} from \"react\";\nimport {genreData} from \"../filmData\";\n\ninterface IGenreMultiSelectorProps {\n    label: string,\n    selectedGenres: string[],\n    onChange: (genre: string[]) => void\n}\n\n\nexport const GenreMultiSelector = ({label, selectedGenres, onChange}: IGenreMultiSelectorProps) => {\n    const [genres, setGenres] = useState<string[]>(selectedGenres);\n    const [isOpen, setIsOpen] = useState(genres.length > 0);\n    const toggle = (e: MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newGenres = [...genres, currentValue]\n            setGenres(newGenres);\n            onChange(newGenres);\n        } else {\n            const newGenres = genres.filter((genre) => currentValue !== genre);\n            setGenres(newGenres);\n            onChange(newGenres);\n        }\n    }\n\n    return (\n        <div className=\"selector\">\n            <button className=\"selector-button\" onClick={toggle}>{label}</button>\n            <div className={`selector-panel ${isOpen ? \"selector-open\" : \"selector-closed\"}`}>\n            {genreData.map(g =>\n                <div key={g.slug} className=\"selector-item\">\n                    <div>\n                        <label>\n                            <input type=\"checkbox\" name={g.slug} checked={genres.includes(g.slug)}\n                                   value={g.slug} onChange={onSelectionChanged}/>  {g.name}\n\n                        </label>\n                    </div>\n                </div>\n            )}\n            </div>\n        </div>\n    )\n}","import {IMovie} from \"./filmData\";\nimport React from \"react\";\nimport \"./moviePreview.css\";\n\nconst cropImgUrl = (imgUrl: string): string => {\n    // original url:\n    // https://vhx.imgix.net/criterionchannelchartersu/assets/bff62486-e5e9-4e8d-ad75-436cb2cf12c9.jpg\n    // append this:\n    // ?auto=format%2Ccompress&fit=crop,left&h=140&q=100&w=100&crop=left\n    const width = 200;\n    const height = 280;\n    return `${imgUrl}?auto=format%2Ccompress&fit=crop,left&h=${height}&q=100&w=${width}&crop=left`\n}\n\ninterface IMoviePreviewProps {\n    movie: IMovie;\n    onReset: (oldMovie: IMovie) => void;\n}\n\nexport const MoviePreview = ({movie, onReset}: IMoviePreviewProps) => {\n    const resetMovie = () => {\n        onReset(movie);\n    }\n    const goToMovie = () => {\n        const url = `${movie.url}?utm_source=tycherion`;\n        const timeoutId = setTimeout(\n            () => {\n                (window as any).location.assign(url);\n            },\n            1000);\n        (window as any).gtag('event', 'search_success', {\n            'event_category': 'search',\n            'movie': movie,\n            'slug': movie.slug,\n            'transport_type': 'beacon',\n            'event_callback': () => {\n                clearTimeout(timeoutId);\n                (window as any).location.assign(url);\n            }\n        });\n        // (window as any).gtag('event', 'click', {\n        //     'event_category': 'outbound',\n        //     'event_label': movie.slug,\n        //     'transport_type': 'beacon',\n        //     'event_callback': () => {\n        //         clearTimeout(timeoutId);\n        //         (window as any).location.assign(movie.url);\n        //     }\n        // });\n    };\n    return (\n        <>\n        <div className=\"movie-result\">\n            <div>\n                <img className=\"movie-result-img\" src={cropImgUrl(movie.img)} alt={movie.title}/>\n            </div>\n            <div>\n                <div className=\"movie-result-title\">\n                    {movie.title}\n                </div>\n                <div>\n                    <div className=\"movie-result-director\">{movie.director}</div>\n                    <div className=\"movie-result-country\">{movie.country} ({movie.year})</div>\n                </div>\n                <div>\n                    {movie.genre.map((genre) =>\n                        <div className=\"movie-result-genre\" key={genre}>{genre}</div>\n                    )}\n                </div>\n            </div>\n        </div>\n            <div className=\"movie-result-buttons\">\n                <button className=\"button\" onClick={goToMovie}>View on Criterion</button>\n                <button className=\"button button-error\" onClick={resetMovie}>I've already seen it</button>\n            </div>\n            </>\n    )\n}","import React from \"react\";\n\nimport \"./alert.css\";\n\n\ninterface IAlertProps {\n    message: string;\n}\n\nexport const Alert = ({message}: IAlertProps) => {\n    return (\n        <div className=\"alert\">\n            {message}\n        </div>\n    );\n}","\nexport const getQsFromHash = (hash: string) => hash.indexOf('?') >= 0 ? hash.substr(hash.indexOf('?')) : '';\n\nexport const getPathFromHash = (hash: string) =>\n    hash.indexOf('?') >= 0 ? hash.substr(1, hash.indexOf('?') - 1) : hash.substr(1);\n\nexport const setQueryParamInHash= (hash: string, key: string, values: string[]) => {\n    const path = getPathFromHash(hash);\n    const qs = getQsFromHash(hash);\n    const query = new URLSearchParams(qs);\n    query.delete(key);\n    values.forEach((value) => {\n        query.append(key, value);\n    });\n    const qsStr = query.toString();\n    return qsStr ? `${path}?${qsStr}` : path;\n}\n\nexport const getQueryParamFromHash = (hash: string, key: string): string[] => {\n    const qs = getQsFromHash(hash);\n    const query = new URLSearchParams(qs);\n    return query.getAll(key);\n}\n\nexport const getSearchStateQS = (hash: string): string => new URLSearchParams(getQsFromHash(hash)).toString();\n","import React, {useEffect, useState} from \"react\";\nimport {DecadeMultiSelector} from \"./selectors/decadeSelector\";\nimport {GeoSelector} from \"./selectors/geoSelector\";\nimport {CountryMultiSelector} from \"./selectors/countryMultiSelector\";\nimport {IMovie, movieList} from \"./filmData\";\nimport {GenreMultiSelector} from \"./selectors/genreMultiSelector\";\nimport {MoviePreview} from \"./moviePreview\";\nimport {Alert} from \"./alert\";\nimport {useHistory} from \"react-router-dom\";\nimport {topFunction} from \"./utils\";\nimport \"./suggest.css\"\nimport {getQueryParamFromHash, getSearchStateQS, setQueryParamInHash} from \"./urlUtils\";\n\nconst skipMultipart = (movieSlug: string): boolean => {\n    // this should be in the scraper.\n    if (movieSlug.indexOf(\"berlin-alexanderplatz\") === 0 &&\n        movieSlug !== 'berlin-alexanderplatz-part-1') {\n        return true;\n    }\n    return movieSlug.indexOf(\"-part-2\") > 0 ||\n        movieSlug.indexOf(\"-part-3\") > 0 ||\n        movieSlug.indexOf(\"-part-two\") > 0 ||\n        movieSlug.indexOf(\"-episode-2\") > 0 ||\n        movieSlug.indexOf(\"-episode-3\") > 0 ||\n        movieSlug.indexOf(\"-episode-4\") > 0 ||\n        movieSlug.indexOf(\"-episode-5\") > 0 ||\n        movieSlug.indexOf(\"-episode-6\") > 0 ||\n        movieSlug.indexOf(\"-episode-7\") > 0 ||\n        movieSlug.indexOf(\"-part-ii\") > 0 ||\n        movieSlug.indexOf(\"-part-iii\") > 0 ||\n        movieSlug.indexOf(\"-part-iv\") > 0;\n\n}\n\nconst findRandomMovie = (\n    movieList: IMovie[],\n    decades: string[],\n    countries: string[],\n    genres: string[],\n    geo: string\n): IMovie | null => {\n    let selectedMovie: IMovie | null = null;\n    let count = 0;\n    const decadesInt = decades.map(d => parseInt(d, 10));\n    for (let movie of movieList) {\n        if (skipMultipart(movie.slug)) {\n            continue;\n        }\n        const movieYear = parseInt(movie.year, 10);\n\n        if (decadesInt.length > 0) {\n            if (!decadesInt.map(d => [d, d + 9])\n                .some(([from, to]) => movieYear >= from\n                    && movieYear <= to\n                )) {\n                continue;\n            }\n        }\n        if (genres.length > 0) {\n            if (genres.filter(value => movie.genre.includes(value)).length === 0) {\n                continue;\n            }\n        }\n\n        if (countries.length > 0 && !countries.includes(movie.country)) {\n            continue;\n        }\n        if (geo && !movie.geo.includes(geo)) {\n            continue;\n        }\n        count += 1;\n        if (selectedMovie == null || Math.floor(Math.random() * count) + 1 === count) {\n            selectedMovie = movie;\n        }\n    }\n    return selectedMovie;\n}\n\nconst getDecadeState = (): string[] => getQueryParamFromHash(window.location.hash, 'd');\n\nconst getCountryState = (): string[] => getQueryParamFromHash(window.location.hash, 'c');\n\nconst getGenreState = (): string[] =>  getQueryParamFromHash(window.location.hash, 'g');\n\nexport const Suggest = () => {\n    const [suggestedMovie, setSuggestedMovie] = useState<IMovie | null>(null);\n    const [decades, setDecades] = useState<string[]>(getDecadeState());\n    const [hasSelected, setHasSelected] = useState<boolean>(false);\n    const [countries, setCountries] = useState<string[]>(getCountryState());\n    const [genres, setGenres] = useState<string[]>(getGenreState());\n    const [geo, setGeo] = useState<string>('US');\n    const history = useHistory();\n\n    useEffect(() => {\n        history.replace(setQueryParamInHash(window.location.hash, 'd', decades));\n    }, [decades, history]);\n\n    useEffect(() => {\n        history.replace(setQueryParamInHash(window.location.hash, 'c', countries));\n    }, [countries, history]);\n\n    useEffect(() => {\n        history.replace(setQueryParamInHash(window.location.hash, 'g', genres));\n    }, [genres, history]);\n\n    const changeCountries = (countries: string[]) => {\n        setCountries(countries);\n    }\n\n    const changeGenres = (genres: string[]) => {\n        setGenres(genres);\n    }\n\n    const changeDecades = (decades: string[]) => {\n        setDecades(decades);\n    }\n\n    const selectMovie = () => {\n        setHasSelected(true);\n        // setSuggestedMovie(findRandomMovie(\n        //     movieList, decades, countries, genres, geo));\n        const movie = findRandomMovie(\n            movieList, decades, countries, genres, geo);\n        topFunction();\n        if (movie) {\n            const qs = getSearchStateQS(window.location.hash);\n            const path = qs ? `/suggest/${movie.slug}?${qs}`: `/suggest/${movie.slug}`;\n            history.push(path);\n        }\n    }\n\n    const onReset = (oldMovie: IMovie) => {\n        setHasSelected(false);\n        setSuggestedMovie(null);\n\n        (window as any).gtag('event', 'search_reject', {\n            'event_category': 'search',\n            'movie': oldMovie,\n            'slug': oldMovie.slug,\n            'transport_type': 'beacon'\n        });\n    }\n\n    useEffect(\n        () => {\n            if (suggestedMovie) {\n                (window as any).gtag('event', 'search', {\n                    'event_category': 'search_result',\n                    'event_label': 'Show Movie',\n                    'movie': suggestedMovie,\n                    'slug': suggestedMovie.slug,\n                    'transport_type': 'beacon'\n                });\n            }\n        },\n        [suggestedMovie],\n    )\n    return (\n            <div className=\"suggest\">\n                {hasSelected && !suggestedMovie &&\n                    <Alert message=\"There are no matches!  You have asked too much of the Goddess!  Beseech again!\" />\n                }\n                <div>\n                    <div>\n                        <h1>Random Movie Finder</h1>\n                        <hr/>\n                    </div>\n                    {!suggestedMovie &&\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p className=\"lead\">Let the Goddess of Fortune, <a\n\t\t\t\t\t\t\thref=\"https://greekgodsandgoddesses.net/goddesses/tyche/\" rel=\"noreferrer\"\n\t\t\t\t\t\t\ttarget=\"_blank\">Tyche</a>,\n\t\t\t\t\t\t\tassign you a movie from <a href=\"https://www.criterionchannel.com/\" target=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t   rel=\"noreferrer\">the Criterion Channel</a><sup>*</sup>.</p>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<DecadeMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Decades &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedDecades={decades}\n\t\t\t\t\t\t\t\tonChange={changeDecades}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CountryMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Countries &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedCountries={countries}\n\t\t\t\t\t\t\t\tonChange={changeCountries}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<GenreMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Genres &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedGenres={genres}\n\t\t\t\t\t\t\t\tonChange={changeGenres}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<GeoSelector\n\t\t\t\t\t\t\t\tselectedGeo={geo}\n\t\t\t\t\t\t\t\tonChange={setGeo}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button className=\"button\"  type=\"button\"\n                                    onClick={selectMovie}>I accept my fate!</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</>\n                    }\n                    {suggestedMovie &&\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p className=\"lead\">Tyche, The Goddess of Fortune, has spoken.</p>\n\t\t\t\t\t\t<MoviePreview movie={suggestedMovie} onReset={onReset}/>\n\t\t\t\t\t</>\n                    }\n                </div>\n            </div>\n    );\n}\n","import {timeAgoInWords} from \"./utils\";\nimport {metaData, summary} from \"./filmData\";\nimport React from \"react\";\nimport {version} from \"../../package.json\";\n\n\nexport const Footer = () => (\n    <footer>\n        <div className=\"container\">\n            <div>Last updated:&nbsp;\n                <span className=\"font-weight-bold\">{timeAgoInWords(metaData.date)}\n                            </span>\n            </div>\n            <div>Movies Indexed:&nbsp;\n                <span className=\"font-weight-bold\">{summary.count}\n                            </span>\n            </div>\n            <hr/>\n            <div className=\"text-muted\">Powered by <a href=\"https://github.com/mikebridge/scrapeterion\"\n                                                      rel=\"noreferrer\"\n                                                      target=\"_blank\">scrapeterion {metaData.scrapeterion}</a> / <a href=\"https://github.com/mikebridge/tycherion\"\n                                                                                                                    rel=\"noreferrer\"\n                                                                                                                    target=\"_blank\">tycherion {version}</a>.\n            </div>\n            <div className=\"text-muted font-italic\"><sup>*</sup> This site is not affiliated with Criterion\n                Channel.\n            </div>\n        </div>\n    </footer>\n);","import React from \"react\";\nimport {MoviePreview} from \"./moviePreview\";\nimport {movieList} from \"./filmData\";\nimport { useHistory } from \"react-router-dom\";\nimport {getSearchStateQS} from \"./urlUtils\";\n\ninterface ISuggestedResultProps {\n    slug: string;\n}\n\nexport const SuggestedResult = ({slug}: ISuggestedResultProps) => {\n    let history = useHistory();\n    const handleClick = () => {\n        const qs = getSearchStateQS(window.location.hash);\n        const path = qs ? `/suggest?${qs}`: `/suggest`;\n        history.push(path);\n    }\n    const movie = movieList.find(m => m.slug === slug);\n    return (\n        movie ?\n            (<MoviePreview movie={movie} onReset={handleClick} />) :\n            (<div>not found</div>)\n    )\n}","//import React from 'react';\n\nexport const SelectApp = () => {\n    // this is a temporary hack since Redirect doesn't seem to work with hash fragments.\n    (window as any).location.assign(\"#/suggest\");\n    return null;\n}\n","import React from 'react';\r\nimport films from '../data/films.json';\r\nimport filmIndex from '../data/filmIndex.json';\r\nimport Fuse from \"fuse.js\";\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst fuseOptions = {}\r\nconst fuseIndex = Fuse.parseIndex(filmIndex);\r\nconst fuse = new Fuse(films, fuseOptions, fuseIndex);\r\n\r\nexport const Search = () => (\r\n    <>\r\n        <div>TODO</div>\r\n        <pre>\r\n            {JSON.stringify(fuse.search(\"strawberries\"))}\r\n        </pre>\r\n    </>\r\n);","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport {NavBar} from \"./main/navBar\";\nimport {Suggest} from \"./main/suggest\";\n\nimport {Footer} from \"./main/footer\";\nimport {SuggestedResult} from \"./main/suggestedResult\";\nimport { SelectApp } from './selectApp';\nimport {Search} from \"./main/search\";\nimport \"./app.css\";\n\nconst Switch2 = Switch as any;\nconst Route2 = Route as any;\n\nconst App = () => (\n    <div className=\"app\">\n        <NavBar/>\n        <div className=\"page\">\n            <div className=\"content\">\n                <Switch2>\n                    {/*<Route path=\"/\">*/}\n                    {/*    <SearchSelector></SearchSelector>*/}\n                    {/*</Route>*/}\n                    <Route2 exact path=\"/\">\n                        <SelectApp />\n                    </Route2>\n                    <Route2 exact path=\"/suggest\">\n                        <Suggest/>\n                    </Route2>\n                    <Route2 path=\"/suggest/:slug\">{\n                        (props: any) =>\n                            props?.match?.params.slug ?\n                                (<SuggestedResult slug={props.match.params.slug}/>)\n                                : <div>not found!</div>\n                    }\n                    </Route2>\n                    <Route2 path=\"/search\">\n                        <Search/>\n                    </Route2>\n                </Switch2>\n            </div>\n        </div>\n        <Footer />\n        {/*{<Redirect exact from=\"/\" to=\"/suggest\" />}*/}\n    </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter as Router} from 'react-router-dom';\n\nconst Router2 = Router as any;\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router2>\n            <App/>\n        </Router2>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}