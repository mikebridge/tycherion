{"version":3,"sources":["main/navBar.tsx","main/utils.ts","main/movieSelector.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","className","ONE_MINUTE","dateReviver","key","value","a","exec","Date","UTC","timeAgoInWords","dateThen","dateNow","now","getTime","then","timeDiff","formatDistanceStrict","addSuffix","movieList","require","metaData","obj","JSON","parse","stringify","err","withDateStringsAsDates","findRandomMovie","movieSlug","selectedMovie","count","movie","slug","indexOf","Math","floor","random","MoviePreview","imgUrl","onReset","goToMovie","timeoutId","setTimeout","window","location","assign","url","gtag","clearTimeout","Media","left","onClick","object","style","src","img","alt","title","body","heading","director","country","year","Button","MovieSelector","useState","suggestedMovie","setSuggestedMovie","useEffect","Jumbotron","rel","target","oldMovie","date","scrapeterion","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b66d9601.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Navbar,\n    NavbarBrand,\n} from 'reactstrap';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const NavBar = () => {\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n                <Container>\n                    <NavbarBrand href=\"#\" className=\"mr-auto\">Tycherion</NavbarBrand>\n                </Container>\n            </Navbar>\n        </div>\n    );\n}\n","import formatDistanceStrict from \"date-fns/formatDistanceStrict\";\n\n// These constants are the number of milliseconds that the given time interval consists of.\nexport const ONE_MINUTE: number = 60 * 1000;\nexport const FIVE_MINUTES: number = 5 * ONE_MINUTE;\nexport const FIFTEEN_MINUTES: number = 15 * ONE_MINUTE;\nexport const ONE_HOUR: number = 60 * ONE_MINUTE;\nexport const ONE_DAY: number = 24 * ONE_HOUR;\n\n// SEE: https://docs.microsoft.com/en-us/scripting/javascript/reference/json-parse-function-javascript\nexport const dateReviver = (key: string, value: any) => {\n    if (typeof value === \"string\") {\n        const a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z?$/.exec(\n            value\n        );\n        if (a) {\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n        }\n    }\n    return value;\n};\n\nexport const withDateStringsAsDates = (obj: any): any => {\n    try {\n        return JSON.parse(JSON.stringify(obj), dateReviver);\n    } catch (err) {\n        return obj;\n    }\n};\n\nexport const timeAgoInWords = (dateThen: Date, dateNow: Date = new Date()): string => {\n    const now = dateNow.getTime();\n    const then = dateThen.getTime();\n    const timeDiff = now - then;\n    if (timeDiff < ONE_MINUTE) {\n        return \"just now\";\n    }\n    return formatDistanceStrict(dateThen, dateNow, {addSuffix: true});\n};","import {Button, Container, Jumbotron, Media} from \"reactstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport {timeAgoInWords, withDateStringsAsDates} from \"./utils\";\n\ninterface IMovie {\n    title: string,\n    url: string,\n    img: string,\n    country: string,\n    year: string,\n    director: string,\n    slug: string\n}\n\ninterface IMovieMetaData {\n    date: Date,\n    scrapeterion: string\n}\n\nconst movieList: IMovie[] = require('../data/films.json');\n\nconst metaDataPreDate: any = require('../data/filmsMetaData.json');\n\nconst metaData: IMovieMetaData = withDateStringsAsDates(metaDataPreDate);\n\nconst cropImgUrl = (imgUrl: string): string => {\n    // original url:\n    // https://vhx.imgix.net/criterionchannelchartersu/assets/bff62486-e5e9-4e8d-ad75-436cb2cf12c9.jpg\n    // append this:\n    // ?auto=format%2Ccompress&fit=crop,left&h=140&q=100&w=100&crop=left\n    const width=200;\n    const height=280;\n    return `${imgUrl}?auto=format%2Ccompress&fit=crop,left&h=${height}&q=100&w=${width}&crop=left`\n}\n\nconst skipMultipart = (movieSlug: string): boolean => {\n    // todo: move this to the scraper\n    if (movieSlug.indexOf(\"berlin-alexanderplatz\") === 0 &&\n        movieSlug !== 'berlin-alexanderplatz-part-1') {\n        return true;\n    }\n    if (movieSlug.indexOf(\"-part-2\") > 0 ||\n        movieSlug.indexOf(\"-part-3\") > 0 ||\n        movieSlug.indexOf(\"-part-two\") > 0 ||\n        movieSlug.indexOf(\"-episode-2\") > 0 ||\n        movieSlug.indexOf(\"-episode-3\") > 0 ||\n        movieSlug.indexOf(\"-episode-4\") > 0 ||\n        movieSlug.indexOf(\"-episode-5\") > 0 ||\n        movieSlug.indexOf(\"-episode-6\") > 0 ||\n        movieSlug.indexOf(\"-episode-7\") > 0 ||\n        movieSlug.indexOf(\"-part-ii\") > 0 ||\n        movieSlug.indexOf(\"-part-iii\") > 0 ||\n        movieSlug.indexOf(\"-part-iv\") > 0) {\n        return true;\n    }\n    return false;\n}\n\nconst findRandomMovie = (movieList: IMovie[]): IMovie => {\n    let selectedMovie: IMovie = movieList[0];\n    let count = 0;\n    for (let movie of movieList) {\n        count += 1;\n        if (skipMultipart(movie.slug)) {\n            continue;\n        }\n\n        if (Math.floor(Math.random() * count) + 1 === count) {\n            selectedMovie = movie;\n        }\n    }\n    return selectedMovie;\n}\n\ninterface IMoviePreviewProps {\n    movie: IMovie;\n    onReset: (oldMovie: IMovie) => void;\n}\n\nexport const MoviePreview = ({movie, onReset}: IMoviePreviewProps) => {\n    const resetMovie = () => {\n        onReset(movie);\n    }\n    const goToMovie = () => {\n        const timeoutId = setTimeout(\n            () => {(window as any).location.assign(movie.url);},\n            1000);\n        (window as any).gtag('event', 'search_success', {\n            'event_category': 'search',\n            'movie': movie,\n            'slug': movie.slug,\n            'transport_type': 'beacon',\n            'event_callback': () => {\n                clearTimeout(timeoutId);\n                (window as any).location.assign(movie.url);\n            }\n        });\n        // (window as any).gtag('event', 'click', {\n        //     'event_category': 'outbound',\n        //     'event_label': movie.slug,\n        //     'transport_type': 'beacon',\n        //     'event_callback': () => {\n        //         clearTimeout(timeoutId);\n        //         (window as any).location.assign(movie.url);\n        //     }\n        // });\n    };\n    return (\n        <Media className=\"bg-light border rounded\">\n            <Media left href=\"#\" onClick={goToMovie}>\n                <Media object style={{\"width\":200, \"height\": 280}} src={cropImgUrl(movie.img)} alt={movie.title} />\n            </Media>\n            <Media body className=\"align-items-center\">\n                <Container className=\"mt-4\">\n                    <Media heading>\n                        {movie.title}\n                    </Media>\n                    <div>\n                        <div className=\"font-weight-bold\">{movie.director}</div>\n                        <div className=\"font-italic\">{movie.country} ({movie.year})</div>\n                    </div>\n                    <div className=\"mt-4\">\n                    <Button color=\"primary\" onClick={goToMovie}>View on Criterion</Button>\n                    <Button color=\"danger\" onClick={resetMovie}>I've already seen it</Button>\n                    </div>\n                </Container>\n            </Media>\n        </Media>\n    )\n}\n\nexport const MovieSelector = () => {\n    const [suggestedMovie, setSuggestedMovie] = useState<IMovie | null>(null);\n\n    const selectMovie = () => {\n        setSuggestedMovie(findRandomMovie(movieList));\n    }\n\n    const onReset = (oldMovie: IMovie) => {\n        setSuggestedMovie(findRandomMovie(movieList));\n        (window as any).gtag('event', 'search_reject', {\n            'event_category': 'search',\n            'movie': oldMovie,\n            'slug': oldMovie.slug,\n            'transport_type': 'beacon'\n        });\n    }\n\n    useEffect(\n        () => {\n            if (suggestedMovie) {\n                (window as any).gtag('event', 'search', {\n                    'event_category': 'search_result',\n                    'event_label': 'Show Movie',\n                    'movie': suggestedMovie,\n                    'slug': suggestedMovie.slug,\n                    'transport_type': 'beacon'\n                });\n            }\n        },\n        [suggestedMovie],\n    )\n\n\n    return (\n            <>\n            <div>\n                &nbsp;\n            </div>\n            <Container className=\"mt-5\">\n                <Jumbotron className={\"p-4\"}>\n                    <h1 className=\"display-6\">Random Movie Selector</h1>\n                    <hr className=\"my-2\"/>\n                    {!suggestedMovie &&\n                        <>\n                            <p className=\"lead\">Let the Goddess of Fortune, <a href=\"https://greekgodsandgoddesses.net/goddesses/tyche/\" rel=\"noreferrer\" target=\"_blank\">Tyche</a>,\n                                assign you a movie on Criterion Channel.</p>\n                            {/*<p className=\"font-italic\">O Goddess Tyche</p>*/}\n                            <p className=\"lead\">\n                                <Button color=\"primary\" onClick={selectMovie}>I accept my fate</Button>\n                            </p>\n                        </>\n                    }\n                    {suggestedMovie &&\n                        <p>\n                            <p className=\"lead\">Tyche, The Goddess of Fortune, has spoken.</p>\n                            <MoviePreview movie={suggestedMovie} onReset={onReset}/>\n                        </p>\n                    }\n                </Jumbotron>\n\n                <footer className=\"footer\">\n                    <div className=\"container\">\n                        <div>Last updated:&nbsp;\n                            <span className=\"font-weight-bold\">{timeAgoInWords(metaData.date)}\n                            </span>\n                        </div>\n                        <hr/>\n                        <div className=\"text-muted\">Powered by <a href=\"https://github.com/mikebridge/scrapeterion\" rel=\"noreferrer\" target=\"_blank\">scrapeterion {metaData.scrapeterion}</a>.</div>\n                        <div className=\"text-muted font-italic\">This site is not affiliated with Criterion.</div>\n                    </div>\n\n                </footer>\n            </Container>\n            </>\n    );\n}","import React from 'react';\n\nimport {NavBar} from \"./main/navBar\";\nimport {MovieSelector} from \"./main/movieSelector\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n    <>\n      <NavBar/>\n      <MovieSelector/>\n    </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}