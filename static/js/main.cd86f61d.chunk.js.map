{"version":3,"sources":["main/navBar.tsx","main/utils.ts","main/movieSelector.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","className","ONE_MINUTE","dateReviver","key","value","a","exec","Date","UTC","timeAgoInWords","dateThen","dateNow","now","getTime","then","timeDiff","formatDistanceStrict","addSuffix","movieList","require","metaData","obj","JSON","parse","stringify","err","withDateStringsAsDates","summary","MoviePreview","imgUrl","movie","onReset","goToMovie","url","timeoutId","setTimeout","window","location","assign","gtag","slug","clearTimeout","Media","left","onClick","object","style","src","img","alt","title","body","heading","director","country","year","ButtonGroup","Button","YearSelector","years","label","name","selected","onChange","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","id","e","currentTarget","Object","entries","map","MovieSelector","useState","suggestedMovie","setSuggestedMovie","fromYear","setFromYear","toYear","setToYear","hasSelected","setHasSelected","useEffect","Alert","Jumbotron","rel","target","Row","Col","xs","parseInt","offset","countries","console","log","movieSlug","selectedMovie","count","fromYearInt","toYearInt","indexOf","movieYear","Math","floor","random","findRandomMovie","oldMovie","date","scrapeterion","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd86f61d.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Navbar,\n    NavbarBrand,\n} from 'reactstrap';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const NavBar = () => {\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n                <Container>\n                    <NavbarBrand href=\"#\" className=\"mr-auto\">Tycherion</NavbarBrand>\n                </Container>\n            </Navbar>\n        </div>\n    );\n}\n","import formatDistanceStrict from \"date-fns/formatDistanceStrict\";\n\n// These constants are the number of milliseconds that the given time interval consists of.\nexport const ONE_MINUTE: number = 60 * 1000;\nexport const FIVE_MINUTES: number = 5 * ONE_MINUTE;\nexport const FIFTEEN_MINUTES: number = 15 * ONE_MINUTE;\nexport const ONE_HOUR: number = 60 * ONE_MINUTE;\nexport const ONE_DAY: number = 24 * ONE_HOUR;\n\n// SEE: https://docs.microsoft.com/en-us/scripting/javascript/reference/json-parse-function-javascript\nexport const dateReviver = (key: string, value: any) => {\n    if (typeof value === \"string\") {\n        const a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z?$/.exec(\n            value\n        );\n        if (a) {\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n        }\n    }\n    return value;\n};\n\nexport const withDateStringsAsDates = (obj: any): any => {\n    try {\n        return JSON.parse(JSON.stringify(obj), dateReviver);\n    } catch (err) {\n        return obj;\n    }\n};\n\nexport const timeAgoInWords = (dateThen: Date, dateNow: Date = new Date()): string => {\n    const now = dateNow.getTime();\n    const then = dateThen.getTime();\n    const timeDiff = now - then;\n    if (timeDiff < ONE_MINUTE) {\n        return \"just now\";\n    }\n    return formatDistanceStrict(dateThen, dateNow, {addSuffix: true});\n};","import {\n    Alert,\n    Button,\n    ButtonGroup,\n    Col,\n    Container,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Jumbotron,\n    Media,\n    Row\n} from \"reactstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport {timeAgoInWords, withDateStringsAsDates} from \"./utils\";\n\ninterface IMovie {\n    title: string,\n    url: string,\n    img: string,\n    country: string,\n    year: string,\n    director: string,\n    slug: string\n}\n\ninterface IMovieMetaData {\n    date: Date,\n    scrapeterion: string\n}\n\ninterface IDirector {\n    name: string,\n    count: number\n}\n\ninterface IYearSummary {\n    [key: string]: number\n}\n\ninterface ISummary {\n    count: number,\n    countries: { [key: string]: number },\n    directors: { [key: string]: IDirector },\n    years: IYearSummary\n}\n\nconst movieList: IMovie[] = require('../data/films.json');\n\nconst metaDataPreDate: any = require('../data/filmsMetaData.json');\n\nconst metaData: IMovieMetaData = withDateStringsAsDates(metaDataPreDate);\n\nconst summary: ISummary = require('../data/summary.json');\n\nconst minDate = \"1915\";  // todo: calculate these\nconst maxDate = \"2020\";\n\nconst cropImgUrl = (imgUrl: string): string => {\n    // original url:\n    // https://vhx.imgix.net/criterionchannelchartersu/assets/bff62486-e5e9-4e8d-ad75-436cb2cf12c9.jpg\n    // append this:\n    // ?auto=format%2Ccompress&fit=crop,left&h=140&q=100&w=100&crop=left\n    const width = 200;\n    const height = 280;\n    return `${imgUrl}?auto=format%2Ccompress&fit=crop,left&h=${height}&q=100&w=${width}&crop=left`\n}\n\nconst skipMultipart = (movieSlug: string): boolean => {\n    // todo: move this to the scraper\n    if (movieSlug.indexOf(\"berlin-alexanderplatz\") === 0 &&\n        movieSlug !== 'berlin-alexanderplatz-part-1') {\n        return true;\n    }\n    if (movieSlug.indexOf(\"-part-2\") > 0 ||\n        movieSlug.indexOf(\"-part-3\") > 0 ||\n        movieSlug.indexOf(\"-part-two\") > 0 ||\n        movieSlug.indexOf(\"-episode-2\") > 0 ||\n        movieSlug.indexOf(\"-episode-3\") > 0 ||\n        movieSlug.indexOf(\"-episode-4\") > 0 ||\n        movieSlug.indexOf(\"-episode-5\") > 0 ||\n        movieSlug.indexOf(\"-episode-6\") > 0 ||\n        movieSlug.indexOf(\"-episode-7\") > 0 ||\n        movieSlug.indexOf(\"-part-ii\") > 0 ||\n        movieSlug.indexOf(\"-part-iii\") > 0 ||\n        movieSlug.indexOf(\"-part-iv\") > 0) {\n        return true;\n    }\n    return false;\n}\n\nconst findRandomMovie = (\n    movieList: IMovie[],\n    fromYear: string,\n    toYear: string,\n    countries: string[]\n): IMovie | null => {\n\n    console.log(`${fromYear}-${toYear}`);\n    let selectedMovie: IMovie | null = null;\n    let count = 0;\n    const fromYearInt = parseInt(fromYear, 10);\n    const toYearInt = parseInt(toYear, 10);\n    for (let movie of movieList) {\n        if (skipMultipart(movie.slug)) {\n            continue;\n        }\n        const movieYear = parseInt(movie.year, 10);\n\n        if (movieYear < fromYearInt || movieYear > toYearInt) {\n            console.log(\"Skipping \" + movieYear)\n            continue;\n        }\n        count += 1;\n        if (selectedMovie == null || Math.floor(Math.random() * count) + 1 === count) {\n            selectedMovie = movie;\n        }\n    }\n    return selectedMovie;\n}\n\ninterface IMoviePreviewProps {\n    movie: IMovie;\n    onReset: (oldMovie: IMovie) => void;\n}\n\nexport const MoviePreview = ({movie, onReset}: IMoviePreviewProps) => {\n    const resetMovie = () => {\n        onReset(movie);\n    }\n    const goToMovie = () => {\n        const url = `${movie.url}?utm_source=tycherion`;\n        const timeoutId = setTimeout(\n            () => {\n                (window as any).location.assign(url);\n            },\n            1000);\n        (window as any).gtag('event', 'search_success', {\n            'event_category': 'search',\n            'movie': movie,\n            'slug': movie.slug,\n            'transport_type': 'beacon',\n            'event_callback': () => {\n                clearTimeout(timeoutId);\n                (window as any).location.assign(url);\n            }\n        });\n        // (window as any).gtag('event', 'click', {\n        //     'event_category': 'outbound',\n        //     'event_label': movie.slug,\n        //     'transport_type': 'beacon',\n        //     'event_callback': () => {\n        //         clearTimeout(timeoutId);\n        //         (window as any).location.assign(movie.url);\n        //     }\n        // });\n    };\n    return (\n        <Media className=\"bg-light border rounded\">\n            <Media left href=\"#\" onClick={goToMovie}>\n                <Media object style={{\"width\": 200, \"height\": 280}} src={cropImgUrl(movie.img)} alt={movie.title}/>\n            </Media>\n            <Media body className=\"align-items-center\">\n                <Container className=\"mt-4\">\n                    <Media heading>\n                        {movie.title}\n                    </Media>\n                    <div>\n                        <div className=\"font-weight-bold\">{movie.director}</div>\n                        <div className=\"font-italic\">{movie.country} ({movie.year})</div>\n                    </div>\n                    <div className=\"mt-4\">\n                        <ButtonGroup>\n                            <Button color=\"primary\" onClick={goToMovie}>View on Criterion</Button>\n                            <Button color=\"danger\" onClick={resetMovie}>I've already seen it</Button>\n                        </ButtonGroup>\n                    </div>\n                </Container>\n            </Media>\n        </Media>\n    )\n}\n\n\ninterface IYearSelectorProps {\n    years: IYearSummary,\n    name: string,\n    label: string,\n    selected: string,\n    onChange: (year: string) => void\n}\n\nexport const YearSelector = (\n    {years, name, label, selected, onChange}: IYearSelectorProps) => {\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        onChange(e.currentTarget.value);\n    }\n\n    return (\n        <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>{label}</InputGroupText>\n                <Input type=\"select\" name=\"{name}\" id=\"{name}\"\n                       value={selected} onChange={onSelectionChanged}>\n                {Object.entries(years).map(([year, count]) =>\n                    <option key={year} value={year}>{year}</option>)}\n                </Input>\n            </InputGroupAddon>\n        </InputGroup>\n    );\n}\n\nexport const MovieSelector = () => {\n    const [suggestedMovie, setSuggestedMovie] = useState<IMovie | null>(null);\n    const [fromYear, setFromYear] = useState<string>(minDate);\n    const [toYear, setToYear] = useState<string>(maxDate);\n    const [hasSelected, setHasSelected] = useState<boolean>(false);\n    const [countries, setCountries] = useState<string[]>([]);\n\n    const changeFromYear = (year: string) => {\n        setFromYear(year);\n        if (parseInt(toYear, 10) < parseInt(year, 10)) {\n            setToYear(year);\n        }\n    }\n    const changeToYear = (year: string) => {\n        setToYear(year);\n        if (parseInt(year, 10) < parseInt(fromYear, 10)) {\n            setFromYear(year);\n        }\n    }\n\n    const selectMovie = () => {\n        setHasSelected(true);\n        setSuggestedMovie(findRandomMovie(movieList, fromYear, toYear, countries));\n    }\n\n    const onReset = (oldMovie: IMovie) => {\n        setHasSelected(false);\n        setSuggestedMovie(null);\n        //setSuggestedMovie(findRandomMovie(movieList, fromYear, toYear, countries));\n        (window as any).gtag('event', 'search_reject', {\n            'event_category': 'search',\n            'movie': oldMovie,\n            'slug': oldMovie.slug,\n            'transport_type': 'beacon'\n        });\n    }\n\n    useEffect(\n        () => {\n            if (suggestedMovie) {\n                (window as any).gtag('event', 'search', {\n                    'event_category': 'search_result',\n                    'event_label': 'Show Movie',\n                    'movie': suggestedMovie,\n                    'slug': suggestedMovie.slug,\n                    'transport_type': 'beacon'\n                });\n            }\n        },\n        [suggestedMovie],\n    )\n\n\n    return (\n        <>\n            <div>\n                &nbsp;\n            </div>\n            <Container className=\"mt-5\">\n                {hasSelected && !suggestedMovie &&\n                    <Alert color=\"danger\">You have asked too much of the Goddess! Try again!</Alert>\n                }\n                    <Jumbotron className={\"p-4\"}>\n                    <h1 className=\"display-6\">Random Movie Finder</h1>\n                    <hr className=\"my-2\"/>\n                    {!suggestedMovie &&\n                    <>\n                        <p className=\"lead\">Let the Goddess of Fortune, <a\n                            href=\"https://greekgodsandgoddesses.net/goddesses/tyche/\" rel=\"noreferrer\"\n                            target=\"_blank\">Tyche</a>,\n                            assign you a movie from <a href=\"https://www.criterionchannel.com/\" target=\"_blank\"\n                                                       rel=\"noreferrer\">the Criterion Channel</a><sup>*</sup>.</p>\n                        {/*<p className=\"font-italic\">O Goddess Tyche</p>*/}\n\n                        <Container>\n                            <Row className=\"flex-row\">\n                                <Col xs=\"auto\">\n\n                                    <YearSelector label=\"From\"\n                                                  years={summary.years}\n                                                  selected={fromYear}\n                                                  name={\"fromyear\"}\n                                                  onChange={changeFromYear}/>\n                                </Col>\n                                <Col xs=\"auto\">\n                                    <YearSelector label=\"To\"\n                                                  years={summary.years}\n                                                  selected={toYear}\n                                                  name={\"toYear\"}\n                                                  onChange={changeToYear}/>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col offset=\"2\" className=\"pt-3\">\n                                    <ButtonGroup>\n                                        <Button color=\"primary\" onClick={selectMovie}>I accept my fate</Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n\n                        </Container>\n\n                    </>\n                    }\n                    {suggestedMovie &&\n                    <p>\n                        <p className=\"lead\">Tyche, The Goddess of Fortune, has spoken.</p>\n                        <MoviePreview movie={suggestedMovie} onReset={onReset}/>\n                    </p>\n                    }\n                </Jumbotron>\n\n                <footer className=\"footer\">\n                    <div className=\"container\">\n                        <div>Last updated:&nbsp;\n                            <span className=\"font-weight-bold\">{timeAgoInWords(metaData.date)}\n                            </span>\n                        </div>\n                        <hr/>\n                        <div className=\"text-muted\">Powered by <a href=\"https://github.com/mikebridge/scrapeterion\"\n                                                                  rel=\"noreferrer\"\n                                                                  target=\"_blank\">scrapeterion {metaData.scrapeterion}</a>.\n                        </div>\n                        <div className=\"text-muted font-italic\"><sup>*</sup> This site is not affiliated with Criterion\n                            Channel.\n                        </div>\n                    </div>\n\n                </footer>\n            </Container>\n        </>\n    );\n}","import React from 'react';\n\nimport {NavBar} from \"./main/navBar\";\nimport {MovieSelector} from \"./main/movieSelector\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n    <>\n      <NavBar/>\n      <MovieSelector/>\n    </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}