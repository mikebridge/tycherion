{"version":3,"sources":["main/navBar.tsx","main/utils.ts","main/movieSelector.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","className","ONE_MINUTE","dateReviver","key","value","a","exec","Date","UTC","timeAgoInWords","dateThen","dateNow","now","getTime","then","timeDiff","formatDistanceStrict","addSuffix","selectorButtonClass","movieList","require","metaData","obj","JSON","parse","stringify","err","withDateStringsAsDates","summary","genreData","MoviePreview","imgUrl","movie","onReset","goToMovie","url","timeoutId","setTimeout","window","location","assign","gtag","slug","clearTimeout","Media","left","onClick","object","style","src","img","alt","title","body","heading","director","country","year","genre","map","Badge","pill","ButtonGroup","Button","getDecades","currentYear","getFullYear","currentDecade","Array","from","length","x","i","DecadeMultiSelector","label","selectedDecades","onChange","useState","decades","setDecades","isOpen","setIsOpen","onSelectionChanged","e","currentValue","currentTarget","checked","newDecades","filter","decade","Collapse","Row","toString","Col","lg","md","xs","FormGroup","check","Label","Input","type","name","includes","GeoSelector","abbrev","selectedGeo","geo","setGeo","geoValue","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","dropDownValue","CountryMultiSelector","selectedCountries","countries","setCountries","newCountries","countryStrings","Object","keys","GenreMultiSelector","selectedGenres","genres","setGenres","newGenres","g","MovieSelector","suggestedMovie","setSuggestedMovie","hasSelected","setHasSelected","useEffect","Alert","Jumbotron","rel","target","Form","selectedMovie","count","decadesInt","d","parseInt","movieSlug","indexOf","movieYear","some","to","Math","floor","random","findRandomMovie","oldMovie","date","scrapeterion","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9cbd74e.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Navbar,\n    NavbarBrand,\n} from 'reactstrap';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const NavBar = () => {\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n                <Container>\n                    <NavbarBrand href=\"#\" className=\"mr-auto\">Tycherion</NavbarBrand>\n                </Container>\n            </Navbar>\n        </div>\n    );\n}\n","import formatDistanceStrict from \"date-fns/formatDistanceStrict\";\n\n// These constants are the number of milliseconds that the given time interval consists of.\nexport const ONE_MINUTE: number = 60 * 1000;\nexport const FIVE_MINUTES: number = 5 * ONE_MINUTE;\nexport const FIFTEEN_MINUTES: number = 15 * ONE_MINUTE;\nexport const ONE_HOUR: number = 60 * ONE_MINUTE;\nexport const ONE_DAY: number = 24 * ONE_HOUR;\n\n// SEE: https://docs.microsoft.com/en-us/scripting/javascript/reference/json-parse-function-javascript\nexport const dateReviver = (key: string, value: any) => {\n    if (typeof value === \"string\") {\n        const a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z?$/.exec(\n            value\n        );\n        if (a) {\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n        }\n    }\n    return value;\n};\n\nexport const withDateStringsAsDates = (obj: any): any => {\n    try {\n        return JSON.parse(JSON.stringify(obj), dateReviver);\n    } catch (err) {\n        return obj;\n    }\n};\n\nexport const timeAgoInWords = (dateThen: Date, dateNow: Date = new Date()): string => {\n    const now = dateNow.getTime();\n    const then = dateThen.getTime();\n    const timeDiff = now - then;\n    if (timeDiff < ONE_MINUTE) {\n        return \"just now\";\n    }\n    return formatDistanceStrict(dateThen, dateNow, {addSuffix: true});\n};\n\nexport const partition = <T>(array: T[], size: number): T[][] =>\n    array.length ? [array.splice(0, size)].concat(partition(array, size)) : [];\n","import React, {useEffect, useState} from \"react\";\nimport {\n    Alert, Badge, Button, ButtonGroup, Col, Collapse,\n    Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle,\n    Form, FormGroup, Input, Jumbotron, Label, Media, Row\n} from \"reactstrap\";\nimport {timeAgoInWords, withDateStringsAsDates} from \"./utils\";\n\nconst selectorButtonClass = \"mt-2 mb-2\"\n\ninterface IMovie {\n    title: string,\n    url: string,\n    img: string,\n    country: string,\n    year: string,\n    director: string,\n    slug: string,\n    genre: string[],\n    geo: string[]\n}\n\ninterface IMovieMetaData {\n    date: Date,\n    scrapeterion: string\n}\n\ninterface IDirectorSummary {\n    name: string,\n    count: number\n}\n\ninterface IYearSummary {\n    [key: string]: number\n}\n\ninterface ICountrySummary {\n    [key: string]: number\n}\n\ninterface IGenre {\n    slug: string,\n    name: string\n}\n\ninterface ISummary {\n    count: number,\n    countries: ICountrySummary,\n    directors: { [key: string]: IDirectorSummary },\n    years: IYearSummary\n}\n\nconst movieList: IMovie[] = require('../data/films.json');\n\nconst metaDataPreDate: any = require('../data/filmsMetaData.json');\n\nconst metaData: IMovieMetaData = withDateStringsAsDates(metaDataPreDate);\n\nconst summary: ISummary = require('../data/summary.json');\n\nconst genreData: IGenre[] = require('../data/genres.json');\n\nconst cropImgUrl = (imgUrl: string): string => {\n    // original url:\n    // https://vhx.imgix.net/criterionchannelchartersu/assets/bff62486-e5e9-4e8d-ad75-436cb2cf12c9.jpg\n    // append this:\n    // ?auto=format%2Ccompress&fit=crop,left&h=140&q=100&w=100&crop=left\n    const width = 200;\n    const height = 280;\n    return `${imgUrl}?auto=format%2Ccompress&fit=crop,left&h=${height}&q=100&w=${width}&crop=left`\n}\n\nconst skipMultipart = (movieSlug: string): boolean => {\n    // todo: move this to the scraper\n    if (movieSlug.indexOf(\"berlin-alexanderplatz\") === 0 &&\n        movieSlug !== 'berlin-alexanderplatz-part-1') {\n        return true;\n    }\n    return movieSlug.indexOf(\"-part-2\") > 0 ||\n        movieSlug.indexOf(\"-part-3\") > 0 ||\n        movieSlug.indexOf(\"-part-two\") > 0 ||\n        movieSlug.indexOf(\"-episode-2\") > 0 ||\n        movieSlug.indexOf(\"-episode-3\") > 0 ||\n        movieSlug.indexOf(\"-episode-4\") > 0 ||\n        movieSlug.indexOf(\"-episode-5\") > 0 ||\n        movieSlug.indexOf(\"-episode-6\") > 0 ||\n        movieSlug.indexOf(\"-episode-7\") > 0 ||\n        movieSlug.indexOf(\"-part-ii\") > 0 ||\n        movieSlug.indexOf(\"-part-iii\") > 0 ||\n        movieSlug.indexOf(\"-part-iv\") > 0;\n\n}\n\nconst findRandomMovie = (\n    movieList: IMovie[],\n    decades: string[],\n    countries: string[],\n    genres: string[],\n    geo: string\n): IMovie | null => {\n\n    let selectedMovie: IMovie | null = null;\n    let count = 0;\n    const decadesInt = decades.map(d => parseInt(d, 10));\n    for (let movie of movieList) {\n        if (skipMultipart(movie.slug)) {\n            continue;\n        }\n        const movieYear = parseInt(movie.year, 10);\n\n        if (decadesInt.length > 0) {\n            if (!decadesInt.map(d => [d, d + 9])\n                .some(([from, to]) => movieYear >= from\n                    && movieYear <= to\n                )) {\n                continue;\n            }\n        }\n        if (genres.length > 0) {\n            if (genres.filter(value => movie.genre.includes(value)).length === 0) {\n                continue;\n            }\n        }\n\n        if (countries.length > 0 && !countries.includes(movie.country)) {\n            continue;\n        }\n        if (geo && !movie.geo.includes(geo)) {\n            continue;\n        }\n        count += 1;\n        if (selectedMovie == null || Math.floor(Math.random() * count) + 1 === count) {\n            selectedMovie = movie;\n        }\n    }\n    return selectedMovie;\n}\n\ninterface IMoviePreviewProps {\n    movie: IMovie;\n    onReset: (oldMovie: IMovie) => void;\n}\n\nexport const MoviePreview = ({movie, onReset}: IMoviePreviewProps) => {\n    const resetMovie = () => {\n        onReset(movie);\n    }\n    const goToMovie = () => {\n        const url = `${movie.url}?utm_source=tycherion`;\n        const timeoutId = setTimeout(\n            () => {\n                (window as any).location.assign(url);\n            },\n            1000);\n        (window as any).gtag('event', 'search_success', {\n            'event_category': 'search',\n            'movie': movie,\n            'slug': movie.slug,\n            'transport_type': 'beacon',\n            'event_callback': () => {\n                clearTimeout(timeoutId);\n                (window as any).location.assign(url);\n            }\n        });\n        // (window as any).gtag('event', 'click', {\n        //     'event_category': 'outbound',\n        //     'event_label': movie.slug,\n        //     'transport_type': 'beacon',\n        //     'event_callback': () => {\n        //         clearTimeout(timeoutId);\n        //         (window as any).location.assign(movie.url);\n        //     }\n        // });\n    };\n    return (\n        <Media className=\"bg-light border rounded\">\n            <Media left href=\"#\" onClick={goToMovie}>\n                <Media object style={{\"width\": 200, \"height\": 280}} src={cropImgUrl(movie.img)} alt={movie.title}/>\n            </Media>\n            <Media body className=\"align-items-center\">\n                <Container className=\"mt-4\">\n                    <Media heading>\n                        {movie.title}\n                    </Media>\n                    <div>\n                        <div className=\"font-weight-bold\">{movie.director}</div>\n                        <div className=\"font-italic\">{movie.country} ({movie.year})</div>\n                    </div>\n                    <div className=\"mt-2\">\n                        {movie.genre.map((genre) =>\n                            <Badge color=\"info\" pill>{genre}</Badge>\n                        )}\n                    </div>\n                    <div className=\"mt-4\">\n                        <ButtonGroup>\n                            <Button color=\"primary\" onClick={goToMovie}>View on Criterion</Button>\n                            <Button color=\"danger\" onClick={resetMovie}>I've already seen it</Button>\n                        </ButtonGroup>\n                    </div>\n                </Container>\n            </Media>\n        </Media>\n    )\n}\n\nconst getCountries = (): string[] => Object.keys(summary.countries)\n\nconst getDecades = (): number[] => {\n    const startDecade = 1910;\n    const currentYear = new Date().getFullYear();\n    const currentDecade = currentYear - (currentYear % 10);\n    return Array.from({length: (currentDecade - startDecade) / 10 + 1}, (\n        x, i) => startDecade + i * 10);\n}\n\ninterface IDecadeMultiSelectorProps {\n    label: string,\n    selectedDecades: string[],\n    onChange: (decades: string[]) => void\n}\n\nexport const DecadeMultiSelector = ({label, selectedDecades, onChange}: IDecadeMultiSelectorProps) => {\n    const [decades, setDecades] = useState<string[]>(selectedDecades);\n    const [isOpen, setIsOpen] = useState(selectedDecades.length > 0);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newDecades = [...decades, currentValue]\n            setDecades(newDecades);\n            onChange(newDecades);\n        } else {\n            const newDecades = decades.filter((decade) => currentValue !== decade);\n            setDecades(newDecades);\n            onChange(newDecades);\n        }\n\n    }\n    return (\n        <>\n            <Container>\n                <Button color=\"secondary\" onClick={toggle} className={selectorButtonClass}\n                        style={{\"width\": \"200px\"}}>{label}</Button>\n                <Collapse isOpen={isOpen}>\n                    <Row>\n                        {getDecades().map(decade => decade.toString()).map(decade =>\n                            <Col lg={3} md={4} xs={6}>\n                                <FormGroup check>\n                                    <Label check key={decade}>\n                                        <Input type=\"checkbox\" name={decade} checked={decades.includes(decade)}\n                                               value={decade} onChange={onSelectionChanged}/>&nbsp;{decade}s\n                                    </Label>\n                                </FormGroup>\n                            </Col>\n                        )}\n                    </Row>\n                </Collapse>\n            </Container>\n\n        </>\n    )\n}\n\ninterface IGeoSelectorProps {\n    selectedGeo: string,\n    onChange: (geo: string) => void\n}\n\nconst geoLookup = (abbrev: string) => {\n    return abbrev==='CA' ? 'Canada' : 'United States'\n}\n\nexport const GeoSelector = ({selectedGeo, onChange}: IGeoSelectorProps) => {\n    const [geo, setGeo] = useState<string>(selectedGeo);\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    const onSelectionChanged = (geoValue: string) => {\n        setGeo(geoValue);\n        onChange(geoValue);\n    }\n    return (\n        <>\n            <Container>\n                <Row>\n                    <Col lg={3} md={4} xs={6}>\n                        <Dropdown isOpen={isOpen} toggle={toggle}>\n                            <DropdownToggle caret style={{\"width\": \"200px\"}} className={selectorButtonClass}>\n                                I am in: {geoLookup(geo)}\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem onClick={() => onSelectionChanged('US')} dropDownValue=\"US\">United\n                                    States</DropdownItem>\n                                <DropdownItem onClick={() => onSelectionChanged('CA')}\n                                              dropDownValue=\"CA\">Canada</DropdownItem>\n                            </DropdownMenu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\ninterface ICountryMultiSelectorProps {\n    label: string,\n    selectedCountries: string[],\n    onChange: (country: string[]) => void\n}\n\nexport const CountryMultiSelector = ({label, selectedCountries, onChange}: ICountryMultiSelectorProps) => {\n    const [countries, setCountries] = useState<string[]>(selectedCountries);\n    const [isOpen, setIsOpen] = useState(countries.length > 0);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newCountries = [...countries, currentValue]\n            setCountries(newCountries);\n            onChange(newCountries);\n        } else {\n            const newCountries = countries.filter((countries) => currentValue !== countries);\n            setCountries(newCountries);\n            onChange(newCountries);\n        }\n    }\n    const countryStrings = getCountries().map(country => country.toString());\n    return (\n        <>\n            <Container>\n                <Button color=\"secondary\" onClick={toggle} className={selectorButtonClass}\n                        style={{\"width\": \"200px\"}}>{label}</Button>\n                <Collapse isOpen={isOpen}>\n                    <Row>\n                        {countryStrings.map(country =>\n                            <Col lg={3} md={4} xs={6}>\n                                <FormGroup check>\n                                    <Label check key={country}>\n                                        <Input type=\"checkbox\" name={country} checked={countries.includes(country)}\n                                               value={country} onChange={onSelectionChanged}/>{country}\n                                    </Label>\n                                </FormGroup>\n                            </Col>\n                        )}\n                    </Row>\n                </Collapse>\n            </Container>\n        </>\n    )\n}\n\ninterface IGenreMultiSelectorProps {\n    label: string,\n    selectedGenres: string[],\n    onChange: (genre: string[]) => void\n}\n\nexport const GenreMultiSelector = ({label, selectedGenres, onChange}: IGenreMultiSelectorProps) => {\n    const [genres, setGenres] = useState<string[]>(selectedGenres);\n    const [isOpen, setIsOpen] = useState(genres.length > 0);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const onSelectionChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        const currentValue = e.currentTarget.value;\n        const isChecked = (e.currentTarget as any).checked;\n        if (isChecked) {\n            const newGenres = [...genres, currentValue]\n            setGenres(newGenres);\n            onChange(newGenres);\n        } else {\n            const newGenres = genres.filter((genre) => currentValue !== genre);\n            setGenres(newGenres);\n            onChange(newGenres);\n        }\n    }\n\n    return (\n        <>\n            <Container>\n                <Button color=\"secondary\" onClick={toggle} className={selectorButtonClass}\n                        style={{\"width\": \"200px\"}}>{label}</Button>\n                <Collapse isOpen={isOpen}>\n                    <Row>\n                        {genreData.map(g =>\n                            <Col lg={3} md={4} xs={6}>\n                                <FormGroup check>\n                                    <Label check key={g.slug}>\n                                        <Input type=\"checkbox\" name={g.slug} checked={genres.includes(g.slug)}\n                                               value={g.slug} onChange={onSelectionChanged}/>{g.name}\n                                    </Label>\n                                </FormGroup>\n                            </Col>\n                        )}\n                    </Row>\n                </Collapse>\n            </Container>\n        </>\n    )\n}\n\nexport const MovieSelector = () => {\n    const [suggestedMovie, setSuggestedMovie] = useState<IMovie | null>(null);\n    const [decades, setDecades] = useState<string[]>([]);\n    const [hasSelected, setHasSelected] = useState<boolean>(false);\n    const [countries, setCountries] = useState<string[]>([]);\n    const [genres, setGenres] = useState<string[]>([]);\n    const [geo, setGeo] = useState<string>('US');\n\n    const changeCountries = (countries: string[]) => {\n        setCountries(countries);\n    }\n\n    const changeGenres = (genres: string[]) => {\n        setGenres(genres);\n    }\n\n    const changeDecades = (decades: string[]) => {\n        setDecades(decades);\n    }\n\n    const selectMovie = () => {\n        setHasSelected(true);\n        setSuggestedMovie(findRandomMovie(\n            movieList, decades, countries, genres, geo));\n    }\n\n    const onReset = (oldMovie: IMovie) => {\n        setHasSelected(false);\n        setSuggestedMovie(null);\n\n        (window as any).gtag('event', 'search_reject', {\n            'event_category': 'search',\n            'movie': oldMovie,\n            'slug': oldMovie.slug,\n            'transport_type': 'beacon'\n        });\n    }\n\n    useEffect(\n        () => {\n            if (suggestedMovie) {\n                (window as any).gtag('event', 'search', {\n                    'event_category': 'search_result',\n                    'event_label': 'Show Movie',\n                    'movie': suggestedMovie,\n                    'slug': suggestedMovie.slug,\n                    'transport_type': 'beacon'\n                });\n            }\n        },\n        [suggestedMovie],\n    )\n\n    return (\n        <>\n            <div>\n                &nbsp;\n            </div>\n            <Container>\n                {hasSelected && !suggestedMovie &&\n\t\t\t\t<Alert color=\"danger\">You have asked too much of the Goddess! Try again!</Alert>\n                }\n                <Jumbotron>\n                    <Container>\n                        <h1>Random Movie Finder</h1>\n                        <hr/>\n                    </Container>\n                    {!suggestedMovie &&\n\t\t\t\t\t<> <Container>\n\t\t\t\t\t\t<p className=\"lead\">Let the Goddess of Fortune, <a\n\t\t\t\t\t\t\thref=\"https://greekgodsandgoddesses.net/goddesses/tyche/\" rel=\"noreferrer\"\n\t\t\t\t\t\t\ttarget=\"_blank\">Tyche</a>,\n\t\t\t\t\t\t\tassign you a movie from <a href=\"https://www.criterionchannel.com/\" target=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t   rel=\"noreferrer\">the Criterion Channel</a><sup>*</sup>.</p>\n                        {/*<p className=\"font-italic\">O Goddess Tyche</p>*/}\n\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<DecadeMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Decades &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedDecades={decades}\n\t\t\t\t\t\t\t\tonChange={changeDecades}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CountryMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Countries &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedCountries={countries}\n\t\t\t\t\t\t\t\tonChange={changeCountries}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<GenreMultiSelector\n\t\t\t\t\t\t\t\tlabel=\"Select Genres &gt;&gt;\"\n\t\t\t\t\t\t\t\tselectedGenres={genres}\n\t\t\t\t\t\t\t\tonChange={changeGenres}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<GeoSelector\n\t\t\t\t\t\t\t\tselectedGeo={geo}\n\t\t\t\t\t\t\t\tonChange={setGeo}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t<Button color=\"primary\" className={selectorButtonClass} style={{\"width\": \"200px\"}}\n\t\t\t\t\t\t\t\t\t\tonClick={selectMovie}>I accept my fate</Button>\n\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</>\n                    }\n                    {suggestedMovie &&\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<p className=\"lead\">Tyche, The Goddess of Fortune, has spoken.</p>\n\t\t\t\t\t\t<MoviePreview movie={suggestedMovie} onReset={onReset}/>\n\t\t\t\t\t</Container>\n                    }\n                </Jumbotron>\n\n                <footer className=\"footer\">\n                    <div className=\"container\">\n                        <div>Last updated:&nbsp;\n                            <span className=\"font-weight-bold\">{timeAgoInWords(metaData.date)}\n                            </span>\n                        </div>\n                        <div>Movies Indexed:&nbsp;\n                            <span className=\"font-weight-bold\">{summary.count}\n                            </span>\n                        </div>\n                        <hr/>\n                        <div className=\"text-muted\">Powered by <a href=\"https://github.com/mikebridge/scrapeterion\"\n                                                                  rel=\"noreferrer\"\n                                                                  target=\"_blank\">scrapeterion {metaData.scrapeterion}</a>.\n                        </div>\n                        <div className=\"text-muted font-italic\"><sup>*</sup> This site is not affiliated with Criterion\n                            Channel.\n                        </div>\n                    </div>\n\n                </footer>\n            </Container>\n        </>\n    );\n}","import React from 'react';\n\nimport {NavBar} from \"./main/navBar\";\nimport {MovieSelector} from \"./main/movieSelector\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n    <>\n      <NavBar/>\n      <MovieSelector/>\n    </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}